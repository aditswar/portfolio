# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build and Deploy to Github Pages

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './website/package-lock.json'
    - name: Install Dependencies   
      working-directory: website
      run: npm install  
    - name: Build & Deploy
      working-directory: website
      run: |
        git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
        npm run deploy -- -u "github-actions-bot <support+actions@github.com>"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Install jq
      run: sudo apt-get install -y jq
  
    - name: Extract version from package.json
      id: vars
      run: |
          # Extract version and set TAG_VERSION
          export TAG_VERSION="v$(jq -r '.version' ./website/package.json)"
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV

    - name: Authenticate with GitHub CLI
      run: gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}

    - name: Delete & Create Release
      run: |
        # Check if the release exists
        if gh release view "$TAG_VERSION" > /dev/null 2>&1; then
          # Delete existing release
          gh release delete "$TAG_VERSION" -y --cleanup-tag
        fi
        # Create a new release
        export RELEASE_NOTES=$(cat ./release-notes.md)
        gh release create "$TAG_VERSION" \
          --title "Release $TAG_VERSION" \
          --notes "${RELEASE_NOTES}" \
          --target main